type Employee {
    id: ID!
    name: String!
    email: String!
    age: Int
    salary: Float!
    designation: String!
    address: Address!
    projects: [Project]
    departmentId: ID
}

type Department {
    id: ID!
    name: String!
    employees: [Employee]
}

type Address {
    street: String
    city: String!
    state: String!
    country: String!
    pinCode: Int!
}

type Project {
    id: ID!
    name: String!
    description: String
    employees: [Employee]
}

type Query {
    employee: [Employee]
    employee(id: ID!): Employee
    project: [Project]
    project(id: ID!): Project
}

type Mutation {
    addEmployee(newEmployee: EmployeeInput!): Employee
    updateEmployee(updateEmployee: UpdateEmployeeInput) : Employee
}

type Subscription {
    allEmployees: Employee
}

input EmployeeInput {
    name: String!
    email: String!
    age: Int
    salary: Float!
    designation: String!
    departmentId: ID!
}

input UpdateEmployeeInput {
    id: ID!
    name: String
    email: String
    age: Int
    salary: Float
    designation: String
    departmentId: ID
}